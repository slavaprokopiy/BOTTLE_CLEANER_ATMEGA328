
capitan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  00800100  00800100  00000ca4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e69  00000000  00000000  00000e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000658  00000000  00000000  00002cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000216b  00000000  00000000  00003315  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00005480  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010cb6  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b78  00000000  00000000  000164de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00017056  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000009a0  00000000  00000000  0001719e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	f2 c0       	rjmp	.+484    	; 0x1ea <__vector_1>
   6:	00 00       	nop
   8:	ff c0       	rjmp	.+510    	; 0x208 <__vector_2>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	59 c0       	rjmp	.+178    	; 0xf4 <__vector_16>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2e c1       	rjmp	.+604    	; 0x2a6 <__vector_18>
  4a:	00 00       	nop
  4c:	ec c0       	rjmp	.+472    	; 0x226 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e3       	ldi	r30, 0x30	; 48
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 35       	cpi	r26, 0x5E	; 94
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	6e d3       	rcall	.+1756   	; 0x778 <main>
  9c:	c7 c5       	rjmp	.+2958   	; 0xc2c <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <timer_init>:
volatile uint8_t CurrentTimer;

//Настройка таймера =========
void timer_init(void){
//Разрешение прерывания по переполнению
	TIMSK0 |= 1<<TOIE0;
  a0:	ee e6       	ldi	r30, 0x6E	; 110
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	80 83       	st	Z, r24

//Нормальный режим работы
	TCCR0A	&= ~(1<<WGM01 | 1<<WGM00);
  aa:	84 b5       	in	r24, 0x24	; 36
  ac:	8c 7f       	andi	r24, 0xFC	; 252
  ae:	84 bd       	out	0x24, r24	; 36
	TCCR0B	&= ~(1<<WGM02);
  b0:	85 b5       	in	r24, 0x25	; 37
  b2:	87 7f       	andi	r24, 0xF7	; 247
  b4:	85 bd       	out	0x25, r24	; 37
  b6:	08 95       	ret

000000b8 <timer_start>:
}

void timer_start(uint8_t* Timer_Iterations){
	Timer_Int_Counter = 0;				//Сброс счетчика количества прерываний таймера
  b8:	10 92 08 01 	sts	0x0108, r1
  bc:	10 92 07 01 	sts	0x0107, r1
	Timer_Delays = Timer_Iterations;	//Установка количества 10-секундных отсчетов
  c0:	09 2e       	mov	r0, r25
  c2:	00 0c       	add	r0, r0
  c4:	aa 0b       	sbc	r26, r26
  c6:	bb 0b       	sbc	r27, r27
  c8:	80 93 0a 01 	sts	0x010A, r24
  cc:	90 93 0b 01 	sts	0x010B, r25
  d0:	a0 93 0c 01 	sts	0x010C, r26
  d4:	b0 93 0d 01 	sts	0x010D, r27
	TCNT0 = 0;
  d8:	16 bc       	out	0x26, r1	; 38
	cli();
  da:	f8 94       	cli
	//Запуск с тактированием от системной частоты с предделителем 1024
	TCCR0B |= 1<<CS02 | 1<<CS00;
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	85 60       	ori	r24, 0x05	; 5
  e0:	85 bd       	out	0x25, r24	; 37
	sei();
  e2:	78 94       	sei
  e4:	08 95       	ret

000000e6 <timer_stop>:
}

void timer_stop(void){
	cli();
  e6:	f8 94       	cli
	// Остановка таймера
	TCCR0B &= ~(1<<CS02 | 1<<CS00);
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	8a 7f       	andi	r24, 0xFA	; 250
  ec:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
  ee:	16 bc       	out	0x26, r1	; 38
	sei();
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <__vector_16>:
}

//Прерывание таймера ========
ISR(TIMER0_OVF_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	//Инкрементируем счетчик прерываний
	Timer_Int_Counter += 1;
 116:	80 91 07 01 	lds	r24, 0x0107
 11a:	90 91 08 01 	lds	r25, 0x0108
 11e:	01 96       	adiw	r24, 0x01	; 1
	if(Timer_Int_Counter == 305) // Если прошла выдержка в 5 секунд
 120:	81 33       	cpi	r24, 0x31	; 49
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	92 07       	cpc	r25, r18
 126:	29 f0       	breq	.+10     	; 0x132 <__vector_16+0x3e>
}

//Прерывание таймера ========
ISR(TIMER0_OVF_vect){
	//Инкрементируем счетчик прерываний
	Timer_Int_Counter += 1;
 128:	90 93 08 01 	sts	0x0108, r25
 12c:	80 93 07 01 	sts	0x0107, r24
 130:	27 c0       	rjmp	.+78     	; 0x180 <__vector_16+0x8c>
	if(Timer_Int_Counter == 305) // Если прошла выдержка в 5 секунд
	{
		Timer_Int_Counter = 0;
 132:	10 92 08 01 	sts	0x0108, r1
 136:	10 92 07 01 	sts	0x0107, r1
		Timer_Delays -= 1;
 13a:	80 91 0a 01 	lds	r24, 0x010A
 13e:	90 91 0b 01 	lds	r25, 0x010B
 142:	a0 91 0c 01 	lds	r26, 0x010C
 146:	b0 91 0d 01 	lds	r27, 0x010D
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	a1 09       	sbc	r26, r1
 14e:	b1 09       	sbc	r27, r1
 150:	80 93 0a 01 	sts	0x010A, r24
 154:	90 93 0b 01 	sts	0x010B, r25
 158:	a0 93 0c 01 	sts	0x010C, r26
 15c:	b0 93 0d 01 	sts	0x010D, r27
		if(Timer_Delays == 0){ // Если это была последняя выдержка
 160:	80 91 0a 01 	lds	r24, 0x010A
 164:	90 91 0b 01 	lds	r25, 0x010B
 168:	a0 91 0c 01 	lds	r26, 0x010C
 16c:	b0 91 0d 01 	lds	r27, 0x010D
 170:	89 2b       	or	r24, r25
 172:	8a 2b       	or	r24, r26
 174:	8b 2b       	or	r24, r27
 176:	21 f4       	brne	.+8      	; 0x180 <__vector_16+0x8c>
			FLAG = FINISH;
 178:	86 e0       	ldi	r24, 0x06	; 6
 17a:	80 93 04 01 	sts	0x0104, r24
			// Останавливаем таймер
			timer_stop();
 17e:	b3 df       	rcall	.-154    	; 0xe6 <timer_stop>
		}
	}
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <board_init>:
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 1a2:	3b b1       	in	r19, 0x0b	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 1a4:	2a b1       	in	r18, 0x0a	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 1a6:	3e 7d       	andi	r19, 0xDE	; 222
 1a8:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 1aa:	84 b1       	in	r24, 0x04	; 4
 1ac:	83 7c       	andi	r24, 0xC3	; 195
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 1ae:	93 7c       	andi	r25, 0xC3	; 195
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 1b0:	2e 7c       	andi	r18, 0xCE	; 206
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 1b2:	32 6d       	ori	r19, 0xD2	; 210
 1b4:	3b b9       	out	0x0b, r19	; 11
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 1b6:	22 6c       	ori	r18, 0xC2	; 194
 1b8:	2a b9       	out	0x0a, r18	; 10
 1ba:	37 b1       	in	r19, 0x07	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 1bc:	28 b1       	in	r18, 0x08	; 8
 1be:	93 60       	ori	r25, 0x03	; 3
 1c0:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 1c2:	83 62       	ori	r24, 0x23	; 35
 1c4:	84 b9       	out	0x04, r24	; 4
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 1c6:	83 2f       	mov	r24, r19
 1c8:	80 7c       	andi	r24, 0xC0	; 192
 1ca:	87 b9       	out	0x07, r24	; 7
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 1cc:	82 2f       	mov	r24, r18
 1ce:	80 7c       	andi	r24, 0xC0	; 192
 1d0:	88 b9       	out	0x08, r24	; 8
 1d2:	08 95       	ret

000001d4 <interrupt_init>:

void interrupt_init(void)
{
	// enable INT0 DI_AVARIYA	External interrupt  (INT0/PD2)
	// on rising edge
	EIMSK |= (1<<INT0);
 1d4:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00)|(1<<ISC01);
 1d6:	e9 e6       	ldi	r30, 0x69	; 105
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	83 60       	ori	r24, 0x03	; 3
 1de:	80 83       	st	Z, r24
	
	// enable INT1 DI_START		External interrupt (INT1/PD3)
	// on rising edge
	EIMSK |= (1<<INT1);
 1e0:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1<<ISC10)|(1<<ISC11);
 1e2:	80 81       	ld	r24, Z
 1e4:	8c 60       	ori	r24, 0x0C	; 12
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <__vector_1>:
	
}
ISR(INT0_vect)	// INT0 DI_AVARIYA	External interrupt  (INT0/PD2)
{
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	8f 93       	push	r24
	// Для варианта программы без использования таймера
	/*//debug_led_3_off();
	emergency_stop();*/
	STATUS_FLAG = STOP;
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	80 93 06 01 	sts	0x0106, r24
}
 1fc:	8f 91       	pop	r24
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <__vector_2>:

ISR(INT1_vect)// INT1 DI_START		External interrupt (INT1/PD3)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
		//debug_led_3_off();
		STATUS_FLAG = START;
	}*/
	
	//Для варианта программы с использованием таймера
	FLAG = START;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	80 93 04 01 	sts	0x0104, r24
	
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_19>:
				break;
			}
		}
		do_control_set(i);
	}
}
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
 23c:	af 93       	push	r26
 23e:	bf 93       	push	r27
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
 244:	e7 e5       	ldi	r30, 0x57	; 87
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	80 81       	ld	r24, Z
 24c:	98 17       	cp	r25, r24
 24e:	b9 f0       	breq	.+46     	; 0x27e <__vector_19+0x58>
 250:	81 81       	ldd	r24, Z+1	; 0x01
 252:	a3 81       	ldd	r26, Z+3	; 0x03
 254:	b4 81       	ldd	r27, Z+4	; 0x04
 256:	a8 0f       	add	r26, r24
 258:	b1 1d       	adc	r27, r1
 25a:	3c 91       	ld	r19, X
 25c:	21 81       	ldd	r18, Z+1	; 0x01
 25e:	42 2f       	mov	r20, r18
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	82 81       	ldd	r24, Z+2	; 0x02
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	48 17       	cp	r20, r24
 26a:	59 07       	cpc	r21, r25
 26c:	11 f0       	breq	.+4      	; 0x272 <__vector_19+0x4c>
 26e:	2f 5f       	subi	r18, 0xFF	; 255
 270:	01 c0       	rjmp	.+2      	; 0x274 <__vector_19+0x4e>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	20 93 58 01 	sts	0x0158, r18
 278:	30 93 c6 00 	sts	0x00C6, r19
 27c:	05 c0       	rjmp	.+10     	; 0x288 <__vector_19+0x62>
 27e:	e1 ec       	ldi	r30, 0xC1	; 193
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	8f 7d       	andi	r24, 0xDF	; 223
 286:	80 83       	st	Z, r24
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <__vector_18>:
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
 2c2:	80 91 c6 00 	lds	r24, 0x00C6
 2c6:	e2 e4       	ldi	r30, 0x42	; 66
 2c8:	f1 e0       	ldi	r31, 0x01	; 1
 2ca:	90 81       	ld	r25, Z
 2cc:	a3 81       	ldd	r26, Z+3	; 0x03
 2ce:	b4 81       	ldd	r27, Z+4	; 0x04
 2d0:	a9 0f       	add	r26, r25
 2d2:	b1 1d       	adc	r27, r1
 2d4:	8c 93       	st	X, r24
 2d6:	20 81       	ld	r18, Z
 2d8:	42 2f       	mov	r20, r18
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	82 81       	ldd	r24, Z+2	; 0x02
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	48 17       	cp	r20, r24
 2e4:	59 07       	cpc	r21, r25
 2e6:	11 f0       	breq	.+4      	; 0x2ec <__vector_18+0x46>
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <__vector_18+0x48>
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	20 93 42 01 	sts	0x0142, r18
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	5f 91       	pop	r21
 300:	4f 91       	pop	r20
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <do_control_set>:
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	91 05       	cpc	r25, r1
 312:	61 f0       	breq	.+24     	; 0x32c <do_control_set+0x1e>
 314:	1c f4       	brge	.+6      	; 0x31c <do_control_set+0xe>
 316:	89 2b       	or	r24, r25
 318:	39 f0       	breq	.+14     	; 0x328 <do_control_set+0x1a>
 31a:	08 95       	ret
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	91 05       	cpc	r25, r1
 320:	39 f0       	breq	.+14     	; 0x330 <do_control_set+0x22>
 322:	03 97       	sbiw	r24, 0x03	; 3
 324:	39 f0       	breq	.+14     	; 0x334 <do_control_set+0x26>
 326:	08 95       	ret
 328:	5e 9a       	sbi	0x0b, 6	; 11
 32a:	08 95       	ret
 32c:	5f 9a       	sbi	0x0b, 7	; 11
 32e:	08 95       	ret
 330:	28 9a       	sbi	0x05, 0	; 5
 332:	08 95       	ret
 334:	29 9a       	sbi	0x05, 1	; 5
 336:	08 95       	ret

00000338 <do_control_clear>:
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	91 05       	cpc	r25, r1
 33c:	61 f0       	breq	.+24     	; 0x356 <do_control_clear+0x1e>
 33e:	1c f4       	brge	.+6      	; 0x346 <do_control_clear+0xe>
 340:	89 2b       	or	r24, r25
 342:	39 f0       	breq	.+14     	; 0x352 <do_control_clear+0x1a>
 344:	08 95       	ret
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	91 05       	cpc	r25, r1
 34a:	39 f0       	breq	.+14     	; 0x35a <do_control_clear+0x22>
 34c:	03 97       	sbiw	r24, 0x03	; 3
 34e:	39 f0       	breq	.+14     	; 0x35e <do_control_clear+0x26>
 350:	08 95       	ret
 352:	5e 98       	cbi	0x0b, 6	; 11
 354:	08 95       	ret
 356:	5f 98       	cbi	0x0b, 7	; 11
 358:	08 95       	ret
 35a:	28 98       	cbi	0x05, 0	; 5
 35c:	08 95       	ret
 35e:	29 98       	cbi	0x05, 1	; 5
 360:	08 95       	ret

00000362 <get_enabled_timers>:
 362:	83 b1       	in	r24, 0x03	; 3
 364:	e0 e0       	ldi	r30, 0x00	; 0
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	82 fb       	bst	r24, 2
 36a:	88 27       	eor	r24, r24
 36c:	80 f9       	bld	r24, 0
 36e:	80 83       	st	Z, r24
 370:	83 b1       	in	r24, 0x03	; 3
 372:	83 fb       	bst	r24, 3
 374:	88 27       	eor	r24, r24
 376:	80 f9       	bld	r24, 0
 378:	81 83       	std	Z+1, r24	; 0x01
 37a:	83 b1       	in	r24, 0x03	; 3
 37c:	82 95       	swap	r24
 37e:	81 70       	andi	r24, 0x01	; 1
 380:	82 83       	std	Z+2, r24	; 0x02
 382:	83 b1       	in	r24, 0x03	; 3
 384:	85 fb       	bst	r24, 5
 386:	88 27       	eor	r24, r24
 388:	80 f9       	bld	r24, 0
 38a:	83 83       	std	Z+3, r24	; 0x03
 38c:	08 95       	ret

0000038e <get_selector_modes>:
 38e:	1f 93       	push	r17
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	84 e4       	ldi	r24, 0x44	; 68
 396:	80 93 7c 00 	sts	0x007C, r24
 39a:	ea e7       	ldi	r30, 0x7A	; 122
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	80 64       	ori	r24, 0x40	; 64
 3a2:	80 83       	st	Z, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	86 fd       	sbrc	r24, 6
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <get_selector_modes+0x16>
 3aa:	80 91 78 00 	lds	r24, 0x0078
 3ae:	90 91 79 00 	lds	r25, 0x0079
 3b2:	90 93 3b 01 	sts	0x013B, r25
 3b6:	80 93 3a 01 	sts	0x013A, r24
 3ba:	85 e4       	ldi	r24, 0x45	; 69
 3bc:	80 93 7c 00 	sts	0x007C, r24
 3c0:	ea e7       	ldi	r30, 0x7A	; 122
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	80 64       	ori	r24, 0x40	; 64
 3c8:	80 83       	st	Z, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	86 fd       	sbrc	r24, 6
 3ce:	fd cf       	rjmp	.-6      	; 0x3ca <get_selector_modes+0x3c>
 3d0:	80 91 78 00 	lds	r24, 0x0078
 3d4:	90 91 79 00 	lds	r25, 0x0079
 3d8:	90 93 3d 01 	sts	0x013D, r25
 3dc:	80 93 3c 01 	sts	0x013C, r24
 3e0:	86 e4       	ldi	r24, 0x46	; 70
 3e2:	80 93 7c 00 	sts	0x007C, r24
 3e6:	ea e7       	ldi	r30, 0x7A	; 122
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	80 81       	ld	r24, Z
 3ec:	80 64       	ori	r24, 0x40	; 64
 3ee:	80 83       	st	Z, r24
 3f0:	80 81       	ld	r24, Z
 3f2:	86 fd       	sbrc	r24, 6
 3f4:	fd cf       	rjmp	.-6      	; 0x3f0 <get_selector_modes+0x62>
 3f6:	80 91 78 00 	lds	r24, 0x0078
 3fa:	90 91 79 00 	lds	r25, 0x0079
 3fe:	90 93 3f 01 	sts	0x013F, r25
 402:	80 93 3e 01 	sts	0x013E, r24
 406:	87 e4       	ldi	r24, 0x47	; 71
 408:	80 93 7c 00 	sts	0x007C, r24
 40c:	ea e7       	ldi	r30, 0x7A	; 122
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	80 64       	ori	r24, 0x40	; 64
 414:	80 83       	st	Z, r24
 416:	80 81       	ld	r24, Z
 418:	86 fd       	sbrc	r24, 6
 41a:	fd cf       	rjmp	.-6      	; 0x416 <get_selector_modes+0x88>
 41c:	80 91 78 00 	lds	r24, 0x0078
 420:	90 91 79 00 	lds	r25, 0x0079
 424:	90 93 41 01 	sts	0x0141, r25
 428:	80 93 40 01 	sts	0x0140, r24
 42c:	ea e3       	ldi	r30, 0x3A	; 58
 42e:	f1 e0       	ldi	r31, 0x01	; 1
 430:	22 e4       	ldi	r18, 0x42	; 66
 432:	31 e0       	ldi	r19, 0x01	; 1
 434:	c2 e0       	ldi	r28, 0x02	; 2
 436:	d0 e0       	ldi	r29, 0x00	; 0
 438:	63 e0       	ldi	r22, 0x03	; 3
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	8f 3f       	cpi	r24, 0xFF	; 255
 446:	12 e0       	ldi	r17, 0x02	; 2
 448:	91 07       	cpc	r25, r17
 44a:	18 f0       	brcs	.+6      	; 0x452 <get_selector_modes+0xc4>
 44c:	51 83       	std	Z+1, r21	; 0x01
 44e:	40 83       	st	Z, r20
 450:	09 c0       	rjmp	.+18     	; 0x464 <get_selector_modes+0xd6>
 452:	8f 3f       	cpi	r24, 0xFF	; 255
 454:	91 05       	cpc	r25, r1
 456:	09 f0       	breq	.+2      	; 0x45a <get_selector_modes+0xcc>
 458:	18 f4       	brcc	.+6      	; 0x460 <get_selector_modes+0xd2>
 45a:	71 83       	std	Z+1, r23	; 0x01
 45c:	60 83       	st	Z, r22
 45e:	02 c0       	rjmp	.+4      	; 0x464 <get_selector_modes+0xd6>
 460:	d1 83       	std	Z+1, r29	; 0x01
 462:	c0 83       	st	Z, r28
 464:	32 96       	adiw	r30, 0x02	; 2
 466:	e2 17       	cp	r30, r18
 468:	f3 07       	cpc	r31, r19
 46a:	51 f7       	brne	.-44     	; 0x440 <get_selector_modes+0xb2>
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	08 95       	ret

00000474 <get_selector_values>:
 474:	83 e4       	ldi	r24, 0x43	; 67
 476:	80 93 7c 00 	sts	0x007C, r24
 47a:	ea e7       	ldi	r30, 0x7A	; 122
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	80 64       	ori	r24, 0x40	; 64
 482:	80 83       	st	Z, r24
 484:	80 81       	ld	r24, Z
 486:	86 fd       	sbrc	r24, 6
 488:	fd cf       	rjmp	.-6      	; 0x484 <get_selector_values+0x10>
 48a:	60 91 78 00 	lds	r22, 0x0078
 48e:	70 91 79 00 	lds	r23, 0x0079
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	b1 d2       	rcall	.+1378   	; 0x9fa <__floatunsisf>
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	40 ea       	ldi	r20, 0xA0	; 160
 49e:	50 e4       	ldi	r21, 0x40	; 64
 4a0:	62 d3       	rcall	.+1732   	; 0xb66 <__mulsf3>
 4a2:	20 e0       	ldi	r18, 0x00	; 0
 4a4:	30 ec       	ldi	r19, 0xC0	; 192
 4a6:	4f e7       	ldi	r20, 0x7F	; 127
 4a8:	54 e4       	ldi	r21, 0x44	; 68
 4aa:	3f d2       	rcall	.+1150   	; 0x92a <__divsf3>
 4ac:	60 93 47 01 	sts	0x0147, r22
 4b0:	70 93 48 01 	sts	0x0148, r23
 4b4:	80 93 49 01 	sts	0x0149, r24
 4b8:	90 93 4a 01 	sts	0x014A, r25
 4bc:	82 e4       	ldi	r24, 0x42	; 66
 4be:	80 93 7c 00 	sts	0x007C, r24
 4c2:	ea e7       	ldi	r30, 0x7A	; 122
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	80 64       	ori	r24, 0x40	; 64
 4ca:	80 83       	st	Z, r24
 4cc:	80 81       	ld	r24, Z
 4ce:	86 fd       	sbrc	r24, 6
 4d0:	fd cf       	rjmp	.-6      	; 0x4cc <get_selector_values+0x58>
 4d2:	60 91 78 00 	lds	r22, 0x0078
 4d6:	70 91 79 00 	lds	r23, 0x0079
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	8d d2       	rcall	.+1306   	; 0x9fa <__floatunsisf>
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	40 ea       	ldi	r20, 0xA0	; 160
 4e6:	50 e4       	ldi	r21, 0x40	; 64
 4e8:	3e d3       	rcall	.+1660   	; 0xb66 <__mulsf3>
 4ea:	20 e0       	ldi	r18, 0x00	; 0
 4ec:	30 ec       	ldi	r19, 0xC0	; 192
 4ee:	4f e7       	ldi	r20, 0x7F	; 127
 4f0:	54 e4       	ldi	r21, 0x44	; 68
 4f2:	1b d2       	rcall	.+1078   	; 0x92a <__divsf3>
 4f4:	60 93 4b 01 	sts	0x014B, r22
 4f8:	70 93 4c 01 	sts	0x014C, r23
 4fc:	80 93 4d 01 	sts	0x014D, r24
 500:	90 93 4e 01 	sts	0x014E, r25
 504:	81 e4       	ldi	r24, 0x41	; 65
 506:	80 93 7c 00 	sts	0x007C, r24
 50a:	ea e7       	ldi	r30, 0x7A	; 122
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	80 64       	ori	r24, 0x40	; 64
 512:	80 83       	st	Z, r24
 514:	80 81       	ld	r24, Z
 516:	86 fd       	sbrc	r24, 6
 518:	fd cf       	rjmp	.-6      	; 0x514 <get_selector_values+0xa0>
 51a:	60 91 78 00 	lds	r22, 0x0078
 51e:	70 91 79 00 	lds	r23, 0x0079
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	69 d2       	rcall	.+1234   	; 0x9fa <__floatunsisf>
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	40 ea       	ldi	r20, 0xA0	; 160
 52e:	50 e4       	ldi	r21, 0x40	; 64
 530:	1a d3       	rcall	.+1588   	; 0xb66 <__mulsf3>
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 ec       	ldi	r19, 0xC0	; 192
 536:	4f e7       	ldi	r20, 0x7F	; 127
 538:	54 e4       	ldi	r21, 0x44	; 68
 53a:	f7 d1       	rcall	.+1006   	; 0x92a <__divsf3>
 53c:	60 93 4f 01 	sts	0x014F, r22
 540:	70 93 50 01 	sts	0x0150, r23
 544:	80 93 51 01 	sts	0x0151, r24
 548:	90 93 52 01 	sts	0x0152, r25
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	80 93 7c 00 	sts	0x007C, r24
 552:	ea e7       	ldi	r30, 0x7A	; 122
 554:	f0 e0       	ldi	r31, 0x00	; 0
 556:	80 81       	ld	r24, Z
 558:	80 64       	ori	r24, 0x40	; 64
 55a:	80 83       	st	Z, r24
 55c:	80 81       	ld	r24, Z
 55e:	86 fd       	sbrc	r24, 6
 560:	fd cf       	rjmp	.-6      	; 0x55c <get_selector_values+0xe8>
 562:	60 91 78 00 	lds	r22, 0x0078
 566:	70 91 79 00 	lds	r23, 0x0079
 56a:	80 e0       	ldi	r24, 0x00	; 0
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	45 d2       	rcall	.+1162   	; 0x9fa <__floatunsisf>
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	40 ea       	ldi	r20, 0xA0	; 160
 576:	50 e4       	ldi	r21, 0x40	; 64
 578:	f6 d2       	rcall	.+1516   	; 0xb66 <__mulsf3>
 57a:	20 e0       	ldi	r18, 0x00	; 0
 57c:	30 ec       	ldi	r19, 0xC0	; 192
 57e:	4f e7       	ldi	r20, 0x7F	; 127
 580:	54 e4       	ldi	r21, 0x44	; 68
 582:	d3 d1       	rcall	.+934    	; 0x92a <__divsf3>
 584:	60 93 53 01 	sts	0x0153, r22
 588:	70 93 54 01 	sts	0x0154, r23
 58c:	80 93 55 01 	sts	0x0155, r24
 590:	90 93 56 01 	sts	0x0156, r25
 594:	08 95       	ret

00000596 <calculate_delays>:
 596:	2f 92       	push	r2
 598:	3f 92       	push	r3
 59a:	4f 92       	push	r4
 59c:	5f 92       	push	r5
 59e:	6f 92       	push	r6
 5a0:	7f 92       	push	r7
 5a2:	8f 92       	push	r8
 5a4:	9f 92       	push	r9
 5a6:	af 92       	push	r10
 5a8:	bf 92       	push	r11
 5aa:	cf 92       	push	r12
 5ac:	df 92       	push	r13
 5ae:	ef 92       	push	r14
 5b0:	ff 92       	push	r15
 5b2:	0f 93       	push	r16
 5b4:	1f 93       	push	r17
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	0a e3       	ldi	r16, 0x3A	; 58
 5bc:	11 e0       	ldi	r17, 0x01	; 1
 5be:	c6 e3       	ldi	r28, 0x36	; 54
 5c0:	d1 e0       	ldi	r29, 0x01	; 1
 5c2:	0f 2e       	mov	r0, r31
 5c4:	f7 e4       	ldi	r31, 0x47	; 71
 5c6:	ef 2e       	mov	r14, r31
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	ff 2e       	mov	r15, r31
 5cc:	f0 2d       	mov	r31, r0
 5ce:	0f 2e       	mov	r0, r31
 5d0:	f2 e4       	ldi	r31, 0x42	; 66
 5d2:	cf 2e       	mov	r12, r31
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	df 2e       	mov	r13, r31
 5d8:	f0 2d       	mov	r31, r0
 5da:	77 24       	eor	r7, r7
 5dc:	73 94       	inc	r7
 5de:	0f 2e       	mov	r0, r31
 5e0:	f8 e7       	ldi	r31, 0x78	; 120
 5e2:	5f 2e       	mov	r5, r31
 5e4:	f0 2d       	mov	r31, r0
 5e6:	0f 2e       	mov	r0, r31
 5e8:	fc e3       	ldi	r31, 0x3C	; 60
 5ea:	2f 2e       	mov	r2, r31
 5ec:	f0 2d       	mov	r31, r0
 5ee:	0f 2e       	mov	r0, r31
 5f0:	f4 e2       	ldi	r31, 0x24	; 36
 5f2:	3f 2e       	mov	r3, r31
 5f4:	f0 2d       	mov	r31, r0
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f8 e1       	ldi	r31, 0x18	; 24
 5fa:	4f 2e       	mov	r4, r31
 5fc:	f0 2d       	mov	r31, r0
 5fe:	68 94       	set
 600:	66 24       	eor	r6, r6
 602:	61 f8       	bld	r6, 1
 604:	f8 01       	movw	r30, r16
 606:	81 91       	ld	r24, Z+
 608:	91 91       	ld	r25, Z+
 60a:	8f 01       	movw	r16, r30
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	91 05       	cpc	r25, r1
 610:	19 f0       	breq	.+6      	; 0x618 <calculate_delays+0x82>
 612:	02 97       	sbiw	r24, 0x02	; 2
 614:	19 f0       	breq	.+6      	; 0x61c <calculate_delays+0x86>
 616:	90 c0       	rjmp	.+288    	; 0x738 <calculate_delays+0x1a2>
 618:	78 82       	st	Y, r7
 61a:	8e c0       	rjmp	.+284    	; 0x738 <calculate_delays+0x1a2>
 61c:	f7 01       	movw	r30, r14
 61e:	80 80       	ld	r8, Z
 620:	91 80       	ldd	r9, Z+1	; 0x01
 622:	a2 80       	ldd	r10, Z+2	; 0x02
 624:	b3 80       	ldd	r11, Z+3	; 0x03
 626:	23 e3       	ldi	r18, 0x33	; 51
 628:	33 e3       	ldi	r19, 0x33	; 51
 62a:	43 eb       	ldi	r20, 0xB3	; 179
 62c:	5e e3       	ldi	r21, 0x3E	; 62
 62e:	c5 01       	movw	r24, r10
 630:	b4 01       	movw	r22, r8
 632:	77 d1       	rcall	.+750    	; 0x922 <__cmpsf2>
 634:	88 23       	and	r24, r24
 636:	0c f4       	brge	.+2      	; 0x63a <calculate_delays+0xa4>
 638:	68 82       	st	Y, r6
 63a:	23 e3       	ldi	r18, 0x33	; 51
 63c:	33 e3       	ldi	r19, 0x33	; 51
 63e:	43 eb       	ldi	r20, 0xB3	; 179
 640:	5e e3       	ldi	r21, 0x3E	; 62
 642:	c5 01       	movw	r24, r10
 644:	b4 01       	movw	r22, r8
 646:	8b d2       	rcall	.+1302   	; 0xb5e <__gesf2>
 648:	18 16       	cp	r1, r24
 64a:	5c f4       	brge	.+22     	; 0x662 <calculate_delays+0xcc>
 64c:	23 ec       	ldi	r18, 0xC3	; 195
 64e:	35 ef       	ldi	r19, 0xF5	; 245
 650:	48 e8       	ldi	r20, 0x88	; 136
 652:	5f e3       	ldi	r21, 0x3F	; 63
 654:	c5 01       	movw	r24, r10
 656:	b4 01       	movw	r22, r8
 658:	64 d1       	rcall	.+712    	; 0x922 <__cmpsf2>
 65a:	88 23       	and	r24, r24
 65c:	14 f4       	brge	.+4      	; 0x662 <calculate_delays+0xcc>
 65e:	f4 e0       	ldi	r31, 0x04	; 4
 660:	f8 83       	st	Y, r31
 662:	23 ec       	ldi	r18, 0xC3	; 195
 664:	35 ef       	ldi	r19, 0xF5	; 245
 666:	48 e8       	ldi	r20, 0x88	; 136
 668:	5f e3       	ldi	r21, 0x3F	; 63
 66a:	c5 01       	movw	r24, r10
 66c:	b4 01       	movw	r22, r8
 66e:	77 d2       	rcall	.+1262   	; 0xb5e <__gesf2>
 670:	18 16       	cp	r1, r24
 672:	5c f4       	brge	.+22     	; 0x68a <calculate_delays+0xf4>
 674:	2a e0       	ldi	r18, 0x0A	; 10
 676:	37 ed       	ldi	r19, 0xD7	; 215
 678:	43 ee       	ldi	r20, 0xE3	; 227
 67a:	5f e3       	ldi	r21, 0x3F	; 63
 67c:	c5 01       	movw	r24, r10
 67e:	b4 01       	movw	r22, r8
 680:	50 d1       	rcall	.+672    	; 0x922 <__cmpsf2>
 682:	88 23       	and	r24, r24
 684:	14 f4       	brge	.+4      	; 0x68a <calculate_delays+0xf4>
 686:	86 e0       	ldi	r24, 0x06	; 6
 688:	88 83       	st	Y, r24
 68a:	2a e0       	ldi	r18, 0x0A	; 10
 68c:	37 ed       	ldi	r19, 0xD7	; 215
 68e:	43 ee       	ldi	r20, 0xE3	; 227
 690:	5f e3       	ldi	r21, 0x3F	; 63
 692:	c5 01       	movw	r24, r10
 694:	b4 01       	movw	r22, r8
 696:	63 d2       	rcall	.+1222   	; 0xb5e <__gesf2>
 698:	18 16       	cp	r1, r24
 69a:	5c f4       	brge	.+22     	; 0x6b2 <calculate_delays+0x11c>
 69c:	20 e0       	ldi	r18, 0x00	; 0
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	40 e2       	ldi	r20, 0x20	; 32
 6a2:	50 e4       	ldi	r21, 0x40	; 64
 6a4:	c5 01       	movw	r24, r10
 6a6:	b4 01       	movw	r22, r8
 6a8:	3c d1       	rcall	.+632    	; 0x922 <__cmpsf2>
 6aa:	88 23       	and	r24, r24
 6ac:	14 f4       	brge	.+4      	; 0x6b2 <calculate_delays+0x11c>
 6ae:	ec e0       	ldi	r30, 0x0C	; 12
 6b0:	e8 83       	st	Y, r30
 6b2:	20 e0       	ldi	r18, 0x00	; 0
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	40 e2       	ldi	r20, 0x20	; 32
 6b8:	50 e4       	ldi	r21, 0x40	; 64
 6ba:	c5 01       	movw	r24, r10
 6bc:	b4 01       	movw	r22, r8
 6be:	4f d2       	rcall	.+1182   	; 0xb5e <__gesf2>
 6c0:	18 16       	cp	r1, r24
 6c2:	54 f4       	brge	.+20     	; 0x6d8 <calculate_delays+0x142>
 6c4:	24 ea       	ldi	r18, 0xA4	; 164
 6c6:	30 e7       	ldi	r19, 0x70	; 112
 6c8:	4d e4       	ldi	r20, 0x4D	; 77
 6ca:	50 e4       	ldi	r21, 0x40	; 64
 6cc:	c5 01       	movw	r24, r10
 6ce:	b4 01       	movw	r22, r8
 6d0:	28 d1       	rcall	.+592    	; 0x922 <__cmpsf2>
 6d2:	88 23       	and	r24, r24
 6d4:	0c f4       	brge	.+2      	; 0x6d8 <calculate_delays+0x142>
 6d6:	48 82       	st	Y, r4
 6d8:	24 ea       	ldi	r18, 0xA4	; 164
 6da:	30 e7       	ldi	r19, 0x70	; 112
 6dc:	4d e4       	ldi	r20, 0x4D	; 77
 6de:	50 e4       	ldi	r21, 0x40	; 64
 6e0:	c5 01       	movw	r24, r10
 6e2:	b4 01       	movw	r22, r8
 6e4:	3c d2       	rcall	.+1144   	; 0xb5e <__gesf2>
 6e6:	18 16       	cp	r1, r24
 6e8:	54 f4       	brge	.+20     	; 0x6fe <calculate_delays+0x168>
 6ea:	28 e4       	ldi	r18, 0x48	; 72
 6ec:	31 ee       	ldi	r19, 0xE1	; 225
 6ee:	4a e7       	ldi	r20, 0x7A	; 122
 6f0:	50 e4       	ldi	r21, 0x40	; 64
 6f2:	c5 01       	movw	r24, r10
 6f4:	b4 01       	movw	r22, r8
 6f6:	15 d1       	rcall	.+554    	; 0x922 <__cmpsf2>
 6f8:	88 23       	and	r24, r24
 6fa:	0c f4       	brge	.+2      	; 0x6fe <calculate_delays+0x168>
 6fc:	38 82       	st	Y, r3
 6fe:	28 e4       	ldi	r18, 0x48	; 72
 700:	31 ee       	ldi	r19, 0xE1	; 225
 702:	4a e7       	ldi	r20, 0x7A	; 122
 704:	50 e4       	ldi	r21, 0x40	; 64
 706:	c5 01       	movw	r24, r10
 708:	b4 01       	movw	r22, r8
 70a:	29 d2       	rcall	.+1106   	; 0xb5e <__gesf2>
 70c:	18 16       	cp	r1, r24
 70e:	54 f4       	brge	.+20     	; 0x724 <calculate_delays+0x18e>
 710:	26 ef       	ldi	r18, 0xF6	; 246
 712:	38 e2       	ldi	r19, 0x28	; 40
 714:	44 e9       	ldi	r20, 0x94	; 148
 716:	50 e4       	ldi	r21, 0x40	; 64
 718:	c5 01       	movw	r24, r10
 71a:	b4 01       	movw	r22, r8
 71c:	02 d1       	rcall	.+516    	; 0x922 <__cmpsf2>
 71e:	88 23       	and	r24, r24
 720:	0c f4       	brge	.+2      	; 0x724 <calculate_delays+0x18e>
 722:	28 82       	st	Y, r2
 724:	26 ef       	ldi	r18, 0xF6	; 246
 726:	38 e2       	ldi	r19, 0x28	; 40
 728:	44 e9       	ldi	r20, 0x94	; 148
 72a:	50 e4       	ldi	r21, 0x40	; 64
 72c:	c5 01       	movw	r24, r10
 72e:	b4 01       	movw	r22, r8
 730:	16 d2       	rcall	.+1068   	; 0xb5e <__gesf2>
 732:	18 16       	cp	r1, r24
 734:	0c f4       	brge	.+2      	; 0x738 <calculate_delays+0x1a2>
 736:	58 82       	st	Y, r5
 738:	21 96       	adiw	r28, 0x01	; 1
 73a:	f4 e0       	ldi	r31, 0x04	; 4
 73c:	ef 0e       	add	r14, r31
 73e:	f1 1c       	adc	r15, r1
 740:	0c 15       	cp	r16, r12
 742:	1d 05       	cpc	r17, r13
 744:	09 f0       	breq	.+2      	; 0x748 <calculate_delays+0x1b2>
 746:	5e cf       	rjmp	.-324    	; 0x604 <calculate_delays+0x6e>
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	ff 90       	pop	r15
 752:	ef 90       	pop	r14
 754:	df 90       	pop	r13
 756:	cf 90       	pop	r12
 758:	bf 90       	pop	r11
 75a:	af 90       	pop	r10
 75c:	9f 90       	pop	r9
 75e:	8f 90       	pop	r8
 760:	7f 90       	pop	r7
 762:	6f 90       	pop	r6
 764:	5f 90       	pop	r5
 766:	4f 90       	pop	r4
 768:	3f 90       	pop	r3
 76a:	2f 90       	pop	r2
 76c:	08 95       	ret

0000076e <turn_controls_off>:
 76e:	5e 9a       	sbi	0x0b, 6	; 11
 770:	5f 9a       	sbi	0x0b, 7	; 11
 772:	28 9a       	sbi	0x05, 0	; 5
 774:	29 9a       	sbi	0x05, 1	; 5
 776:	08 95       	ret

00000778 <main>:

// Вариант с реализацией задержки на таймере
int main(void){
	// Insert system clock initialization code here (sysclk_init()).
	board_init();
 778:	14 dd       	rcall	.-1496   	; 0x1a2 <board_init>
	interrupt_init();
 77a:	2c dd       	rcall	.-1448   	; 0x1d4 <interrupt_init>
	timer_init();
 77c:	91 dc       	rcall	.-1758   	; 0xa0 <timer_init>
 *
 * \param prescaler   ADC clock prescaler
 */
static inline void adc_init(enum adc_prescaler prescaler)
{
	ADCSRA = (uint8_t)prescaler | (1 << ADEN);
 77e:	87 e8       	ldi	r24, 0x87	; 135
 780:	80 93 7a 00 	sts	0x007A, r24

	// set prescaler and enable ADC
	adc_init(ADC_PRESCALER_DIV128);

	// Insert application code here, after the board has been initialized.
	sei();
 784:	78 94       	sei
 786:	85 e5       	ldi	r24, 0x55	; 85
 788:	98 e5       	ldi	r25, 0x58	; 88
 78a:	a4 e1       	ldi	r26, 0x14	; 20
 78c:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
 78e:	01 97       	sbiw	r24, 0x01	; 1
 790:	a1 09       	sbc	r26, r1
 792:	b1 09       	sbc	r27, r1
 794:	e1 f7       	brne	.-8      	; 0x78e <main+0x16>
	cpu_delay_ms(500, F_CPU);	// задержка при включении для защиты от помех и ложных срабатываний
	FLAG = 0;					// Сброс ложных флагов
 796:	10 92 04 01 	sts	0x0104, r1
	STATUS_FLAG = READY;		// Переход в состояние готов
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	80 93 06 01 	sts	0x0106, r24
				}
				STATUS_FLAG = TIMER_WORK;
			}
			else{											// Если текущий таймер не разрешен
				if(CurrentTimer++ > 3){
					STATUS_FLAG = END;
 7a0:	05 e0       	ldi	r16, 0x05	; 5
					RC_STATUS = ON;					
				}
				else{										// Если время таймера фиксировано или определяется галетным переключателем
					timer_start(DELAY[CurrentTimer]);		// Запускаем таймер
				}
				STATUS_FLAG = TIMER_WORK;
 7a2:	0f 2e       	mov	r0, r31
 7a4:	f9 e0       	ldi	r31, 0x09	; 9
 7a6:	ef 2e       	mov	r14, r31
 7a8:	f0 2d       	mov	r31, r0
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 7aa:	0f 2e       	mov	r0, r31
 7ac:	fa ea       	ldi	r31, 0xAA	; 170
 7ae:	9f 2e       	mov	r9, r31
 7b0:	f0 2d       	mov	r31, r0
 7b2:	0f 2e       	mov	r0, r31
 7b4:	f1 e1       	ldi	r31, 0x11	; 17
 7b6:	af 2e       	mov	r10, r31
 7b8:	f0 2d       	mov	r31, r0
 7ba:	68 94       	set
 7bc:	bb 24       	eor	r11, r11
 7be:	b2 f8       	bld	r11, 2
 7c0:	c1 2c       	mov	r12, r1
					ioport_configure_pin(DO_RC_START,		IOPORT_DIR_OUTPUT |  IOPORT_INIT_LOW); // Переводим вывод RC_START в режим выхода со значением 0
					//gpio_set_pin_low(DO_RC_START);			// Включаем внешний таймер
					cpu_delay_ms(100, F_CPU);				// Низким импульсом 100 мс
					ioport_configure_pin(DO_RC_START,		IOPORT_DIR_INPUT |  IOPORT_PULL_UP);// Переводим вывод RC_START в режим входа со значением 1
					//gpio_set_pin_high(DO_RC_START);			
					RC_STATUS = ON;					
 7c2:	c1 e0       	ldi	r28, 0x01	; 1
			}
			else{
				if(SELECTOR_MODE[CurrentTimer] == RC_MODE){
					
					if(ioport_get_pin_level(DI_RC_READY) == 0){	// Если пришел сигнал с внешнего таймера
						FLAG = FINISH;							// Устанавливаем флаг FINISH
 7c4:	0f 2e       	mov	r0, r31
 7c6:	f6 e0       	ldi	r31, 0x06	; 6
 7c8:	df 2e       	mov	r13, r31
 7ca:	f0 2d       	mov	r31, r0
			case TIMER_WORK:
			if(FLAG == FINISH){
				FLAG = 0;
				do_control_set(CurrentTimer);				// Установка вывода таймера
				if(CurrentTimer++ < 4){
					STATUS_FLAG = TIMER_SETUP;
 7cc:	68 94       	set
 7ce:	ff 24       	eor	r15, r15
 7d0:	f3 f8       	bld	r15, 3
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 7d2:	10 e0       	ldi	r17, 0x00	; 0
 7d4:	d0 e0       	ldi	r29, 0x00	; 0
	sei();
	cpu_delay_ms(500, F_CPU);	// задержка при включении для защиты от помех и ложных срабатываний
	FLAG = 0;					// Сброс ложных флагов
	STATUS_FLAG = READY;		// Переход в состояние готов
	while(1){
		switch(STATUS_FLAG){
 7d6:	80 91 06 01 	lds	r24, 0x0106
 7da:	85 30       	cpi	r24, 0x05	; 5
 7dc:	09 f4       	brne	.+2      	; 0x7e0 <main+0x68>
 7de:	8f c0       	rjmp	.+286    	; 0x8fe <main+0x186>
 7e0:	30 f4       	brcc	.+12     	; 0x7ee <main+0x76>
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	51 f0       	breq	.+20     	; 0x7fa <main+0x82>
 7e6:	83 30       	cpi	r24, 0x03	; 3
 7e8:	09 f4       	brne	.+2      	; 0x7ec <main+0x74>
 7ea:	8d c0       	rjmp	.+282    	; 0x906 <__stack+0x7>
 7ec:	f4 cf       	rjmp	.-24     	; 0x7d6 <main+0x5e>
 7ee:	88 30       	cpi	r24, 0x08	; 8
 7f0:	01 f1       	breq	.+64     	; 0x832 <main+0xba>
 7f2:	89 30       	cpi	r24, 0x09	; 9
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <main+0x80>
 7f6:	58 c0       	rjmp	.+176    	; 0x8a8 <main+0x130>
 7f8:	ee cf       	rjmp	.-36     	; 0x7d6 <main+0x5e>

			case READY:
			if(FLAG == START){
 7fa:	80 91 04 01 	lds	r24, 0x0104
 7fe:	82 30       	cpi	r24, 0x02	; 2
 800:	51 f7       	brne	.-44     	; 0x7d6 <main+0x5e>
				FLAG = 0;
 802:	10 92 04 01 	sts	0x0104, r1
 806:	59 98       	cbi	0x0b, 1	; 11
 808:	81 2f       	mov	r24, r17
 80a:	9d 2f       	mov	r25, r29
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	85 35       	cpi	r24, 0x55	; 85
 810:	20 ed       	ldi	r18, 0xD0	; 208
 812:	92 07       	cpc	r25, r18
 814:	d9 f7       	brne	.-10     	; 0x80c <main+0x94>
				gpio_set_pin_low(DO_END);				// Сброс вывода КОНЕЦ										
				cpu_delay_ms(20, F_CPU);				// задержка необходима, чтобы пройти через фильтры			
																	
				if(ioport_get_pin_level(DI_BYPASS)==1){	// Если на входе байпас единица								
 816:	48 9b       	sbis	0x09, 0	; 9
 818:	09 c0       	rjmp	.+18     	; 0x82c <main+0xb4>
					get_enabled_timers();
 81a:	a3 dd       	rcall	.-1210   	; 0x362 <get_enabled_timers>
					TIMER_ENABLE_STATUS[0] = 1;
					TIMER_ENABLE_STATUS[1] = 1;
					TIMER_ENABLE_STATUS[2] = 1;
					TIMER_ENABLE_STATUS[3] = 0;
*/
					get_selector_modes();
 81c:	b8 dd       	rcall	.-1168   	; 0x38e <get_selector_modes>
/*
					SELECTOR_MODE[0] = FIX_MODE;
					SELECTOR_MODE[1] = GALET_MODE;
					SELECTOR_MODE[2] = RC_MODE;
*/				
					get_selector_values();
 81e:	2a de       	rcall	.-940    	; 0x474 <get_selector_values>
/*
					SELECTOR_VALUE[1] = 0; //Selector voltage tresholds: 0.35 1.07 1.78 2.5 3.21 3.92 4.63
					SELECTOR_VALUE[2] = 0.6; 
*/					
					calculate_delays();
 820:	ba de       	rcall	.-652    	; 0x596 <calculate_delays>
									
					CurrentTimer = 0;
 822:	10 92 09 01 	sts	0x0109, r1
					STATUS_FLAG = TIMER_SETUP;
 826:	f0 92 06 01 	sts	0x0106, r15
 82a:	d5 cf       	rjmp	.-86     	; 0x7d6 <main+0x5e>
				}
				else{
					STATUS_FLAG = END;
 82c:	00 93 06 01 	sts	0x0106, r16
 830:	d2 cf       	rjmp	.-92     	; 0x7d6 <main+0x5e>
				
			}
			break;
						
			case TIMER_SETUP:
			if(TIMER_ENABLE_STATUS[CurrentTimer]){			// Если текущий таймер разрешен
 832:	90 91 09 01 	lds	r25, 0x0109
 836:	29 2f       	mov	r18, r25
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	f9 01       	movw	r30, r18
 83c:	e0 50       	subi	r30, 0x00	; 0
 83e:	ff 4f       	sbci	r31, 0xFF	; 255
 840:	80 81       	ld	r24, Z
 842:	88 23       	and	r24, r24
 844:	39 f1       	breq	.+78     	; 0x894 <main+0x11c>
				do_control_clear(CurrentTimer);				// Сброс вывода таймера
 846:	c9 01       	movw	r24, r18
 848:	77 dd       	rcall	.-1298   	; 0x338 <do_control_clear>
				if(SELECTOR_MODE[CurrentTimer] == RC_MODE){	// Если времязадающей является внешняя RC-цепь
 84a:	80 91 09 01 	lds	r24, 0x0109
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	fc 01       	movw	r30, r24
 852:	ee 0f       	add	r30, r30
 854:	ff 1f       	adc	r31, r31
 856:	e6 5c       	subi	r30, 0xC6	; 198
 858:	fe 4f       	sbci	r31, 0xFE	; 254
 85a:	20 81       	ld	r18, Z
 85c:	31 81       	ldd	r19, Z+1	; 0x01
 85e:	23 30       	cpi	r18, 0x03	; 3
 860:	31 05       	cpc	r19, r1
 862:	79 f4       	brne	.+30     	; 0x882 <main+0x10a>
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 864:	5c 98       	cbi	0x0b, 4	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 866:	54 9a       	sbi	0x0a, 4	; 10
 868:	89 2d       	mov	r24, r9
 86a:	9a 2d       	mov	r25, r10
 86c:	ab 2d       	mov	r26, r11
 86e:	bc 2d       	mov	r27, r12
 870:	01 97       	sbiw	r24, 0x01	; 1
 872:	a1 09       	sbc	r26, r1
 874:	b1 09       	sbc	r27, r1
 876:	e1 f7       	brne	.-8      	; 0x870 <main+0xf8>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 878:	54 98       	cbi	0x0a, 4	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 87a:	5c 9a       	sbi	0x0b, 4	; 11
					ioport_configure_pin(DO_RC_START,		IOPORT_DIR_OUTPUT |  IOPORT_INIT_LOW); // Переводим вывод RC_START в режим выхода со значением 0
					//gpio_set_pin_low(DO_RC_START);			// Включаем внешний таймер
					cpu_delay_ms(100, F_CPU);				// Низким импульсом 100 мс
					ioport_configure_pin(DO_RC_START,		IOPORT_DIR_INPUT |  IOPORT_PULL_UP);// Переводим вывод RC_START в режим входа со значением 1
					//gpio_set_pin_high(DO_RC_START);			
					RC_STATUS = ON;					
 87c:	c0 93 05 01 	sts	0x0105, r28
 880:	06 c0       	rjmp	.+12     	; 0x88e <main+0x116>
				}
				else{										// Если время таймера фиксировано или определяется галетным переключателем
					timer_start(DELAY[CurrentTimer]);		// Запускаем таймер
 882:	fc 01       	movw	r30, r24
 884:	ea 5c       	subi	r30, 0xCA	; 202
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	80 81       	ld	r24, Z
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	15 dc       	rcall	.-2006   	; 0xb8 <timer_start>
				}
				STATUS_FLAG = TIMER_WORK;
 88e:	e0 92 06 01 	sts	0x0106, r14
 892:	a1 cf       	rjmp	.-190    	; 0x7d6 <main+0x5e>
			}
			else{											// Если текущий таймер не разрешен
				if(CurrentTimer++ > 3){
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	89 0f       	add	r24, r25
 898:	80 93 09 01 	sts	0x0109, r24
 89c:	94 30       	cpi	r25, 0x04	; 4
 89e:	08 f4       	brcc	.+2      	; 0x8a2 <main+0x12a>
 8a0:	9a cf       	rjmp	.-204    	; 0x7d6 <main+0x5e>
					STATUS_FLAG = END;
 8a2:	00 93 06 01 	sts	0x0106, r16
 8a6:	97 cf       	rjmp	.-210    	; 0x7d6 <main+0x5e>
				
			}
			break;
			
			case TIMER_WORK:
			if(FLAG == FINISH){
 8a8:	80 91 04 01 	lds	r24, 0x0104
 8ac:	86 30       	cpi	r24, 0x06	; 6
 8ae:	a1 f4       	brne	.+40     	; 0x8d8 <main+0x160>
				FLAG = 0;
 8b0:	10 92 04 01 	sts	0x0104, r1
				do_control_set(CurrentTimer);				// Установка вывода таймера
 8b4:	80 91 09 01 	lds	r24, 0x0109
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	29 dd       	rcall	.-1454   	; 0x30e <do_control_set>
				if(CurrentTimer++ < 4){
 8bc:	80 91 09 01 	lds	r24, 0x0109
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	98 0f       	add	r25, r24
 8c4:	90 93 09 01 	sts	0x0109, r25
 8c8:	84 30       	cpi	r24, 0x04	; 4
 8ca:	18 f4       	brcc	.+6      	; 0x8d2 <main+0x15a>
					STATUS_FLAG = TIMER_SETUP;
 8cc:	f0 92 06 01 	sts	0x0106, r15
 8d0:	82 cf       	rjmp	.-252    	; 0x7d6 <main+0x5e>
				}
				else{
					STATUS_FLAG = END;
 8d2:	00 93 06 01 	sts	0x0106, r16
 8d6:	7f cf       	rjmp	.-258    	; 0x7d6 <main+0x5e>
				}
			}
			else{
				if(SELECTOR_MODE[CurrentTimer] == RC_MODE){
 8d8:	e0 91 09 01 	lds	r30, 0x0109
 8dc:	f0 e0       	ldi	r31, 0x00	; 0
 8de:	ee 0f       	add	r30, r30
 8e0:	ff 1f       	adc	r31, r31
 8e2:	e6 5c       	subi	r30, 0xC6	; 198
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	80 81       	ld	r24, Z
 8e8:	91 81       	ldd	r25, Z+1	; 0x01
 8ea:	03 97       	sbiw	r24, 0x03	; 3
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <main+0x178>
 8ee:	73 cf       	rjmp	.-282    	; 0x7d6 <main+0x5e>
					
					if(ioport_get_pin_level(DI_RC_READY) == 0){	// Если пришел сигнал с внешнего таймера
 8f0:	4d 99       	sbic	0x09, 5	; 9
 8f2:	71 cf       	rjmp	.-286    	; 0x7d6 <main+0x5e>
						FLAG = FINISH;							// Устанавливаем флаг FINISH
 8f4:	d0 92 04 01 	sts	0x0104, r13
						RC_STATUS = OFF;
 8f8:	10 92 05 01 	sts	0x0105, r1
 8fc:	6c cf       	rjmp	.-296    	; 0x7d6 <main+0x5e>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 8fe:	59 9a       	sbi	0x0b, 1	; 11
			}
			break;
			
			case END:
			gpio_set_pin_high(DO_END);		// Установка вывода КОНЕЦ
			STATUS_FLAG = READY;
 900:	c0 93 06 01 	sts	0x0106, r28
			break;
 904:	68 cf       	rjmp	.-304    	; 0x7d6 <main+0x5e>
			
			case STOP:
			turn_controls_off();
 906:	33 df       	rcall	.-410    	; 0x76e <turn_controls_off>
 908:	59 9a       	sbi	0x0b, 1	; 11
 90a:	81 2f       	mov	r24, r17
 90c:	9d 2f       	mov	r25, r29
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	85 35       	cpi	r24, 0x55	; 85
 912:	20 ed       	ldi	r18, 0xD0	; 208
 914:	92 07       	cpc	r25, r18
 916:	d9 f7       	brne	.-10     	; 0x90e <__stack+0xf>
			gpio_set_pin_high(DO_END);		// Установка вывода КОНЕЦ
			cpu_delay_ms(20, F_CPU);		// Ожидаем, пока команду STOP отработают все предыдущие таймеры
			FLAG = 0;						// И сбрасываем флаг, который мог установиться выходом КОНЕЦ предыдущего таймера
 918:	10 92 04 01 	sts	0x0104, r1
			STATUS_FLAG = READY;
 91c:	c0 93 06 01 	sts	0x0106, r28
			break;
 920:	5a cf       	rjmp	.-332    	; 0x7d6 <main+0x5e>

00000922 <__cmpsf2>:
 922:	a8 d0       	rcall	.+336    	; 0xa74 <__fp_cmp>
 924:	08 f4       	brcc	.+2      	; 0x928 <__cmpsf2+0x6>
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	08 95       	ret

0000092a <__divsf3>:
 92a:	0c d0       	rcall	.+24     	; 0x944 <__divsf3x>
 92c:	de c0       	rjmp	.+444    	; 0xaea <__fp_round>
 92e:	d6 d0       	rcall	.+428    	; 0xadc <__fp_pscB>
 930:	40 f0       	brcs	.+16     	; 0x942 <__divsf3+0x18>
 932:	cd d0       	rcall	.+410    	; 0xace <__fp_pscA>
 934:	30 f0       	brcs	.+12     	; 0x942 <__divsf3+0x18>
 936:	21 f4       	brne	.+8      	; 0x940 <__divsf3+0x16>
 938:	5f 3f       	cpi	r21, 0xFF	; 255
 93a:	19 f0       	breq	.+6      	; 0x942 <__divsf3+0x18>
 93c:	bf c0       	rjmp	.+382    	; 0xabc <__fp_inf>
 93e:	51 11       	cpse	r21, r1
 940:	08 c1       	rjmp	.+528    	; 0xb52 <__fp_szero>
 942:	c2 c0       	rjmp	.+388    	; 0xac8 <__fp_nan>

00000944 <__divsf3x>:
 944:	e3 d0       	rcall	.+454    	; 0xb0c <__fp_split3>
 946:	98 f3       	brcs	.-26     	; 0x92e <__divsf3+0x4>

00000948 <__divsf3_pse>:
 948:	99 23       	and	r25, r25
 94a:	c9 f3       	breq	.-14     	; 0x93e <__divsf3+0x14>
 94c:	55 23       	and	r21, r21
 94e:	b1 f3       	breq	.-20     	; 0x93c <__divsf3+0x12>
 950:	95 1b       	sub	r25, r21
 952:	55 0b       	sbc	r21, r21
 954:	bb 27       	eor	r27, r27
 956:	aa 27       	eor	r26, r26
 958:	62 17       	cp	r22, r18
 95a:	73 07       	cpc	r23, r19
 95c:	84 07       	cpc	r24, r20
 95e:	38 f0       	brcs	.+14     	; 0x96e <__divsf3_pse+0x26>
 960:	9f 5f       	subi	r25, 0xFF	; 255
 962:	5f 4f       	sbci	r21, 0xFF	; 255
 964:	22 0f       	add	r18, r18
 966:	33 1f       	adc	r19, r19
 968:	44 1f       	adc	r20, r20
 96a:	aa 1f       	adc	r26, r26
 96c:	a9 f3       	breq	.-22     	; 0x958 <__divsf3_pse+0x10>
 96e:	33 d0       	rcall	.+102    	; 0x9d6 <__divsf3_pse+0x8e>
 970:	0e 2e       	mov	r0, r30
 972:	3a f0       	brmi	.+14     	; 0x982 <__divsf3_pse+0x3a>
 974:	e0 e8       	ldi	r30, 0x80	; 128
 976:	30 d0       	rcall	.+96     	; 0x9d8 <__divsf3_pse+0x90>
 978:	91 50       	subi	r25, 0x01	; 1
 97a:	50 40       	sbci	r21, 0x00	; 0
 97c:	e6 95       	lsr	r30
 97e:	00 1c       	adc	r0, r0
 980:	ca f7       	brpl	.-14     	; 0x974 <__divsf3_pse+0x2c>
 982:	29 d0       	rcall	.+82     	; 0x9d6 <__divsf3_pse+0x8e>
 984:	fe 2f       	mov	r31, r30
 986:	27 d0       	rcall	.+78     	; 0x9d6 <__divsf3_pse+0x8e>
 988:	66 0f       	add	r22, r22
 98a:	77 1f       	adc	r23, r23
 98c:	88 1f       	adc	r24, r24
 98e:	bb 1f       	adc	r27, r27
 990:	26 17       	cp	r18, r22
 992:	37 07       	cpc	r19, r23
 994:	48 07       	cpc	r20, r24
 996:	ab 07       	cpc	r26, r27
 998:	b0 e8       	ldi	r27, 0x80	; 128
 99a:	09 f0       	breq	.+2      	; 0x99e <__divsf3_pse+0x56>
 99c:	bb 0b       	sbc	r27, r27
 99e:	80 2d       	mov	r24, r0
 9a0:	bf 01       	movw	r22, r30
 9a2:	ff 27       	eor	r31, r31
 9a4:	93 58       	subi	r25, 0x83	; 131
 9a6:	5f 4f       	sbci	r21, 0xFF	; 255
 9a8:	2a f0       	brmi	.+10     	; 0x9b4 <__divsf3_pse+0x6c>
 9aa:	9e 3f       	cpi	r25, 0xFE	; 254
 9ac:	51 05       	cpc	r21, r1
 9ae:	68 f0       	brcs	.+26     	; 0x9ca <__divsf3_pse+0x82>
 9b0:	85 c0       	rjmp	.+266    	; 0xabc <__fp_inf>
 9b2:	cf c0       	rjmp	.+414    	; 0xb52 <__fp_szero>
 9b4:	5f 3f       	cpi	r21, 0xFF	; 255
 9b6:	ec f3       	brlt	.-6      	; 0x9b2 <__divsf3_pse+0x6a>
 9b8:	98 3e       	cpi	r25, 0xE8	; 232
 9ba:	dc f3       	brlt	.-10     	; 0x9b2 <__divsf3_pse+0x6a>
 9bc:	86 95       	lsr	r24
 9be:	77 95       	ror	r23
 9c0:	67 95       	ror	r22
 9c2:	b7 95       	ror	r27
 9c4:	f7 95       	ror	r31
 9c6:	9f 5f       	subi	r25, 0xFF	; 255
 9c8:	c9 f7       	brne	.-14     	; 0x9bc <__divsf3_pse+0x74>
 9ca:	88 0f       	add	r24, r24
 9cc:	91 1d       	adc	r25, r1
 9ce:	96 95       	lsr	r25
 9d0:	87 95       	ror	r24
 9d2:	97 f9       	bld	r25, 7
 9d4:	08 95       	ret
 9d6:	e1 e0       	ldi	r30, 0x01	; 1
 9d8:	66 0f       	add	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	bb 1f       	adc	r27, r27
 9e0:	62 17       	cp	r22, r18
 9e2:	73 07       	cpc	r23, r19
 9e4:	84 07       	cpc	r24, r20
 9e6:	ba 07       	cpc	r27, r26
 9e8:	20 f0       	brcs	.+8      	; 0x9f2 <__divsf3_pse+0xaa>
 9ea:	62 1b       	sub	r22, r18
 9ec:	73 0b       	sbc	r23, r19
 9ee:	84 0b       	sbc	r24, r20
 9f0:	ba 0b       	sbc	r27, r26
 9f2:	ee 1f       	adc	r30, r30
 9f4:	88 f7       	brcc	.-30     	; 0x9d8 <__divsf3_pse+0x90>
 9f6:	e0 95       	com	r30
 9f8:	08 95       	ret

000009fa <__floatunsisf>:
 9fa:	e8 94       	clt
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__floatsisf+0x12>

000009fe <__floatsisf>:
 9fe:	97 fb       	bst	r25, 7
 a00:	3e f4       	brtc	.+14     	; 0xa10 <__floatsisf+0x12>
 a02:	90 95       	com	r25
 a04:	80 95       	com	r24
 a06:	70 95       	com	r23
 a08:	61 95       	neg	r22
 a0a:	7f 4f       	sbci	r23, 0xFF	; 255
 a0c:	8f 4f       	sbci	r24, 0xFF	; 255
 a0e:	9f 4f       	sbci	r25, 0xFF	; 255
 a10:	99 23       	and	r25, r25
 a12:	a9 f0       	breq	.+42     	; 0xa3e <__floatsisf+0x40>
 a14:	f9 2f       	mov	r31, r25
 a16:	96 e9       	ldi	r25, 0x96	; 150
 a18:	bb 27       	eor	r27, r27
 a1a:	93 95       	inc	r25
 a1c:	f6 95       	lsr	r31
 a1e:	87 95       	ror	r24
 a20:	77 95       	ror	r23
 a22:	67 95       	ror	r22
 a24:	b7 95       	ror	r27
 a26:	f1 11       	cpse	r31, r1
 a28:	f8 cf       	rjmp	.-16     	; 0xa1a <__floatsisf+0x1c>
 a2a:	fa f4       	brpl	.+62     	; 0xa6a <__floatsisf+0x6c>
 a2c:	bb 0f       	add	r27, r27
 a2e:	11 f4       	brne	.+4      	; 0xa34 <__floatsisf+0x36>
 a30:	60 ff       	sbrs	r22, 0
 a32:	1b c0       	rjmp	.+54     	; 0xa6a <__floatsisf+0x6c>
 a34:	6f 5f       	subi	r22, 0xFF	; 255
 a36:	7f 4f       	sbci	r23, 0xFF	; 255
 a38:	8f 4f       	sbci	r24, 0xFF	; 255
 a3a:	9f 4f       	sbci	r25, 0xFF	; 255
 a3c:	16 c0       	rjmp	.+44     	; 0xa6a <__floatsisf+0x6c>
 a3e:	88 23       	and	r24, r24
 a40:	11 f0       	breq	.+4      	; 0xa46 <__floatsisf+0x48>
 a42:	96 e9       	ldi	r25, 0x96	; 150
 a44:	11 c0       	rjmp	.+34     	; 0xa68 <__floatsisf+0x6a>
 a46:	77 23       	and	r23, r23
 a48:	21 f0       	breq	.+8      	; 0xa52 <__floatsisf+0x54>
 a4a:	9e e8       	ldi	r25, 0x8E	; 142
 a4c:	87 2f       	mov	r24, r23
 a4e:	76 2f       	mov	r23, r22
 a50:	05 c0       	rjmp	.+10     	; 0xa5c <__floatsisf+0x5e>
 a52:	66 23       	and	r22, r22
 a54:	71 f0       	breq	.+28     	; 0xa72 <__floatsisf+0x74>
 a56:	96 e8       	ldi	r25, 0x86	; 134
 a58:	86 2f       	mov	r24, r22
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	2a f0       	brmi	.+10     	; 0xa6a <__floatsisf+0x6c>
 a60:	9a 95       	dec	r25
 a62:	66 0f       	add	r22, r22
 a64:	77 1f       	adc	r23, r23
 a66:	88 1f       	adc	r24, r24
 a68:	da f7       	brpl	.-10     	; 0xa60 <__floatsisf+0x62>
 a6a:	88 0f       	add	r24, r24
 a6c:	96 95       	lsr	r25
 a6e:	87 95       	ror	r24
 a70:	97 f9       	bld	r25, 7
 a72:	08 95       	ret

00000a74 <__fp_cmp>:
 a74:	99 0f       	add	r25, r25
 a76:	00 08       	sbc	r0, r0
 a78:	55 0f       	add	r21, r21
 a7a:	aa 0b       	sbc	r26, r26
 a7c:	e0 e8       	ldi	r30, 0x80	; 128
 a7e:	fe ef       	ldi	r31, 0xFE	; 254
 a80:	16 16       	cp	r1, r22
 a82:	17 06       	cpc	r1, r23
 a84:	e8 07       	cpc	r30, r24
 a86:	f9 07       	cpc	r31, r25
 a88:	c0 f0       	brcs	.+48     	; 0xaba <__fp_cmp+0x46>
 a8a:	12 16       	cp	r1, r18
 a8c:	13 06       	cpc	r1, r19
 a8e:	e4 07       	cpc	r30, r20
 a90:	f5 07       	cpc	r31, r21
 a92:	98 f0       	brcs	.+38     	; 0xaba <__fp_cmp+0x46>
 a94:	62 1b       	sub	r22, r18
 a96:	73 0b       	sbc	r23, r19
 a98:	84 0b       	sbc	r24, r20
 a9a:	95 0b       	sbc	r25, r21
 a9c:	39 f4       	brne	.+14     	; 0xaac <__fp_cmp+0x38>
 a9e:	0a 26       	eor	r0, r26
 aa0:	61 f0       	breq	.+24     	; 0xaba <__fp_cmp+0x46>
 aa2:	23 2b       	or	r18, r19
 aa4:	24 2b       	or	r18, r20
 aa6:	25 2b       	or	r18, r21
 aa8:	21 f4       	brne	.+8      	; 0xab2 <__fp_cmp+0x3e>
 aaa:	08 95       	ret
 aac:	0a 26       	eor	r0, r26
 aae:	09 f4       	brne	.+2      	; 0xab2 <__fp_cmp+0x3e>
 ab0:	a1 40       	sbci	r26, 0x01	; 1
 ab2:	a6 95       	lsr	r26
 ab4:	8f ef       	ldi	r24, 0xFF	; 255
 ab6:	81 1d       	adc	r24, r1
 ab8:	81 1d       	adc	r24, r1
 aba:	08 95       	ret

00000abc <__fp_inf>:
 abc:	97 f9       	bld	r25, 7
 abe:	9f 67       	ori	r25, 0x7F	; 127
 ac0:	80 e8       	ldi	r24, 0x80	; 128
 ac2:	70 e0       	ldi	r23, 0x00	; 0
 ac4:	60 e0       	ldi	r22, 0x00	; 0
 ac6:	08 95       	ret

00000ac8 <__fp_nan>:
 ac8:	9f ef       	ldi	r25, 0xFF	; 255
 aca:	80 ec       	ldi	r24, 0xC0	; 192
 acc:	08 95       	ret

00000ace <__fp_pscA>:
 ace:	00 24       	eor	r0, r0
 ad0:	0a 94       	dec	r0
 ad2:	16 16       	cp	r1, r22
 ad4:	17 06       	cpc	r1, r23
 ad6:	18 06       	cpc	r1, r24
 ad8:	09 06       	cpc	r0, r25
 ada:	08 95       	ret

00000adc <__fp_pscB>:
 adc:	00 24       	eor	r0, r0
 ade:	0a 94       	dec	r0
 ae0:	12 16       	cp	r1, r18
 ae2:	13 06       	cpc	r1, r19
 ae4:	14 06       	cpc	r1, r20
 ae6:	05 06       	cpc	r0, r21
 ae8:	08 95       	ret

00000aea <__fp_round>:
 aea:	09 2e       	mov	r0, r25
 aec:	03 94       	inc	r0
 aee:	00 0c       	add	r0, r0
 af0:	11 f4       	brne	.+4      	; 0xaf6 <__fp_round+0xc>
 af2:	88 23       	and	r24, r24
 af4:	52 f0       	brmi	.+20     	; 0xb0a <__fp_round+0x20>
 af6:	bb 0f       	add	r27, r27
 af8:	40 f4       	brcc	.+16     	; 0xb0a <__fp_round+0x20>
 afa:	bf 2b       	or	r27, r31
 afc:	11 f4       	brne	.+4      	; 0xb02 <__fp_round+0x18>
 afe:	60 ff       	sbrs	r22, 0
 b00:	04 c0       	rjmp	.+8      	; 0xb0a <__fp_round+0x20>
 b02:	6f 5f       	subi	r22, 0xFF	; 255
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	08 95       	ret

00000b0c <__fp_split3>:
 b0c:	57 fd       	sbrc	r21, 7
 b0e:	90 58       	subi	r25, 0x80	; 128
 b10:	44 0f       	add	r20, r20
 b12:	55 1f       	adc	r21, r21
 b14:	59 f0       	breq	.+22     	; 0xb2c <__fp_splitA+0x10>
 b16:	5f 3f       	cpi	r21, 0xFF	; 255
 b18:	71 f0       	breq	.+28     	; 0xb36 <__fp_splitA+0x1a>
 b1a:	47 95       	ror	r20

00000b1c <__fp_splitA>:
 b1c:	88 0f       	add	r24, r24
 b1e:	97 fb       	bst	r25, 7
 b20:	99 1f       	adc	r25, r25
 b22:	61 f0       	breq	.+24     	; 0xb3c <__fp_splitA+0x20>
 b24:	9f 3f       	cpi	r25, 0xFF	; 255
 b26:	79 f0       	breq	.+30     	; 0xb46 <__fp_splitA+0x2a>
 b28:	87 95       	ror	r24
 b2a:	08 95       	ret
 b2c:	12 16       	cp	r1, r18
 b2e:	13 06       	cpc	r1, r19
 b30:	14 06       	cpc	r1, r20
 b32:	55 1f       	adc	r21, r21
 b34:	f2 cf       	rjmp	.-28     	; 0xb1a <__fp_split3+0xe>
 b36:	46 95       	lsr	r20
 b38:	f1 df       	rcall	.-30     	; 0xb1c <__fp_splitA>
 b3a:	08 c0       	rjmp	.+16     	; 0xb4c <__fp_splitA+0x30>
 b3c:	16 16       	cp	r1, r22
 b3e:	17 06       	cpc	r1, r23
 b40:	18 06       	cpc	r1, r24
 b42:	99 1f       	adc	r25, r25
 b44:	f1 cf       	rjmp	.-30     	; 0xb28 <__fp_splitA+0xc>
 b46:	86 95       	lsr	r24
 b48:	71 05       	cpc	r23, r1
 b4a:	61 05       	cpc	r22, r1
 b4c:	08 94       	sec
 b4e:	08 95       	ret

00000b50 <__fp_zero>:
 b50:	e8 94       	clt

00000b52 <__fp_szero>:
 b52:	bb 27       	eor	r27, r27
 b54:	66 27       	eor	r22, r22
 b56:	77 27       	eor	r23, r23
 b58:	cb 01       	movw	r24, r22
 b5a:	97 f9       	bld	r25, 7
 b5c:	08 95       	ret

00000b5e <__gesf2>:
 b5e:	8a df       	rcall	.-236    	; 0xa74 <__fp_cmp>
 b60:	08 f4       	brcc	.+2      	; 0xb64 <__gesf2+0x6>
 b62:	8f ef       	ldi	r24, 0xFF	; 255
 b64:	08 95       	ret

00000b66 <__mulsf3>:
 b66:	0b d0       	rcall	.+22     	; 0xb7e <__mulsf3x>
 b68:	c0 cf       	rjmp	.-128    	; 0xaea <__fp_round>
 b6a:	b1 df       	rcall	.-158    	; 0xace <__fp_pscA>
 b6c:	28 f0       	brcs	.+10     	; 0xb78 <__mulsf3+0x12>
 b6e:	b6 df       	rcall	.-148    	; 0xadc <__fp_pscB>
 b70:	18 f0       	brcs	.+6      	; 0xb78 <__mulsf3+0x12>
 b72:	95 23       	and	r25, r21
 b74:	09 f0       	breq	.+2      	; 0xb78 <__mulsf3+0x12>
 b76:	a2 cf       	rjmp	.-188    	; 0xabc <__fp_inf>
 b78:	a7 cf       	rjmp	.-178    	; 0xac8 <__fp_nan>
 b7a:	11 24       	eor	r1, r1
 b7c:	ea cf       	rjmp	.-44     	; 0xb52 <__fp_szero>

00000b7e <__mulsf3x>:
 b7e:	c6 df       	rcall	.-116    	; 0xb0c <__fp_split3>
 b80:	a0 f3       	brcs	.-24     	; 0xb6a <__mulsf3+0x4>

00000b82 <__mulsf3_pse>:
 b82:	95 9f       	mul	r25, r21
 b84:	d1 f3       	breq	.-12     	; 0xb7a <__mulsf3+0x14>
 b86:	95 0f       	add	r25, r21
 b88:	50 e0       	ldi	r21, 0x00	; 0
 b8a:	55 1f       	adc	r21, r21
 b8c:	62 9f       	mul	r22, r18
 b8e:	f0 01       	movw	r30, r0
 b90:	72 9f       	mul	r23, r18
 b92:	bb 27       	eor	r27, r27
 b94:	f0 0d       	add	r31, r0
 b96:	b1 1d       	adc	r27, r1
 b98:	63 9f       	mul	r22, r19
 b9a:	aa 27       	eor	r26, r26
 b9c:	f0 0d       	add	r31, r0
 b9e:	b1 1d       	adc	r27, r1
 ba0:	aa 1f       	adc	r26, r26
 ba2:	64 9f       	mul	r22, r20
 ba4:	66 27       	eor	r22, r22
 ba6:	b0 0d       	add	r27, r0
 ba8:	a1 1d       	adc	r26, r1
 baa:	66 1f       	adc	r22, r22
 bac:	82 9f       	mul	r24, r18
 bae:	22 27       	eor	r18, r18
 bb0:	b0 0d       	add	r27, r0
 bb2:	a1 1d       	adc	r26, r1
 bb4:	62 1f       	adc	r22, r18
 bb6:	73 9f       	mul	r23, r19
 bb8:	b0 0d       	add	r27, r0
 bba:	a1 1d       	adc	r26, r1
 bbc:	62 1f       	adc	r22, r18
 bbe:	83 9f       	mul	r24, r19
 bc0:	a0 0d       	add	r26, r0
 bc2:	61 1d       	adc	r22, r1
 bc4:	22 1f       	adc	r18, r18
 bc6:	74 9f       	mul	r23, r20
 bc8:	33 27       	eor	r19, r19
 bca:	a0 0d       	add	r26, r0
 bcc:	61 1d       	adc	r22, r1
 bce:	23 1f       	adc	r18, r19
 bd0:	84 9f       	mul	r24, r20
 bd2:	60 0d       	add	r22, r0
 bd4:	21 1d       	adc	r18, r1
 bd6:	82 2f       	mov	r24, r18
 bd8:	76 2f       	mov	r23, r22
 bda:	6a 2f       	mov	r22, r26
 bdc:	11 24       	eor	r1, r1
 bde:	9f 57       	subi	r25, 0x7F	; 127
 be0:	50 40       	sbci	r21, 0x00	; 0
 be2:	8a f0       	brmi	.+34     	; 0xc06 <__mulsf3_pse+0x84>
 be4:	e1 f0       	breq	.+56     	; 0xc1e <__mulsf3_pse+0x9c>
 be6:	88 23       	and	r24, r24
 be8:	4a f0       	brmi	.+18     	; 0xbfc <__mulsf3_pse+0x7a>
 bea:	ee 0f       	add	r30, r30
 bec:	ff 1f       	adc	r31, r31
 bee:	bb 1f       	adc	r27, r27
 bf0:	66 1f       	adc	r22, r22
 bf2:	77 1f       	adc	r23, r23
 bf4:	88 1f       	adc	r24, r24
 bf6:	91 50       	subi	r25, 0x01	; 1
 bf8:	50 40       	sbci	r21, 0x00	; 0
 bfa:	a9 f7       	brne	.-22     	; 0xbe6 <__mulsf3_pse+0x64>
 bfc:	9e 3f       	cpi	r25, 0xFE	; 254
 bfe:	51 05       	cpc	r21, r1
 c00:	70 f0       	brcs	.+28     	; 0xc1e <__mulsf3_pse+0x9c>
 c02:	5c cf       	rjmp	.-328    	; 0xabc <__fp_inf>
 c04:	a6 cf       	rjmp	.-180    	; 0xb52 <__fp_szero>
 c06:	5f 3f       	cpi	r21, 0xFF	; 255
 c08:	ec f3       	brlt	.-6      	; 0xc04 <__mulsf3_pse+0x82>
 c0a:	98 3e       	cpi	r25, 0xE8	; 232
 c0c:	dc f3       	brlt	.-10     	; 0xc04 <__mulsf3_pse+0x82>
 c0e:	86 95       	lsr	r24
 c10:	77 95       	ror	r23
 c12:	67 95       	ror	r22
 c14:	b7 95       	ror	r27
 c16:	f7 95       	ror	r31
 c18:	e7 95       	ror	r30
 c1a:	9f 5f       	subi	r25, 0xFF	; 255
 c1c:	c1 f7       	brne	.-16     	; 0xc0e <__mulsf3_pse+0x8c>
 c1e:	fe 2b       	or	r31, r30
 c20:	88 0f       	add	r24, r24
 c22:	91 1d       	adc	r25, r1
 c24:	96 95       	lsr	r25
 c26:	87 95       	ror	r24
 c28:	97 f9       	bld	r25, 7
 c2a:	08 95       	ret

00000c2c <_exit>:
 c2c:	f8 94       	cli

00000c2e <__stop_program>:
 c2e:	ff cf       	rjmp	.-2      	; 0xc2e <__stop_program>
